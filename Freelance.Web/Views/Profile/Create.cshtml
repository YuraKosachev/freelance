@model Freelance.Web.Models.ProfileViewModel
@using Microsoft.AspNet.Identity

@{
    ViewBag.Title = "Create";
}

<h2><span class="glyphicon glyphicon-pencil"></span>СОЗДАТЬ</h2>

@using (Html.BeginForm("Create","Profile", new { UserId = User.Identity.GetUserId() },FormMethod.Post,new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Новый профиль</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
      
        <div class="form-group">
            @Html.LabelFor(m => m.CategoryId, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.CategoryId, new SelectList(Model.IndexState.Categories, "key", "value", Model.CategoryId), new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DescriptionProfile, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DescriptionProfile, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DescriptionProfile, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TimeFrom, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class='input-group date time'>
                    @Html.TextBoxFor(model => model.TimeFrom, new { @class = "form-control", placeholder = "Выберите время" })
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-time"></span>
                    </span>
                </div>
                @Html.ValidationMessageFor(model => model.TimeFrom, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TimeTo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class='input-group date time'>
                    @Html.TextBoxFor(model => model.TimeTo, new { @class = "form-control", placeholder = "Выберите время" })
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-time"></span>
                    </span>
                </div>
                @Html.ValidationMessageFor(model => model.TimeTo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="actions" hidden>
            
            <input type="file" id="upload" data-type-file="text" name="File" value="Choose a file" placehol />
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10 btn-group">
                <button type="button" data-source="file" class="btn btn-default">
                <span class="glyphicon glyphicon-paperclip"></span>
                </button>
                <button type="submit"  class="btn btn-success">Создать</button>
            </div>
        </div>
    </div>
}


    <div>
        <a href="@Url.Link("Index", Model.IndexState, Model.IndexState.SortProperty)" role="button" class="btn btn-default">
            <span class="glyphicon glyphicon-chevron-left"></span>
            Назад к списку
        </a>
    </div>

@section Scripts {
    @Scripts.Render("~/bundles/Exif")
    <script type="text/javascript">
        $(function () {

            $('button[data-source="file"]').on("click", function (e) {
                $("input[type='file']").trigger('click');
            });
            $('#upload').on('change', function () { 
                
                var file = this.files[0];
                //file_selected(file);
                var reader = new FileReader();
                
            });
            function file_selected( file) {
                try {
                    //var file = document.getElementById('uploaded_file').files[0];
                    if (file) {
                        // Предварительная проверка на JPEG
                        if (/\.(jpe?g)$/i.test(file.name)) {
                            // Старые версии Firefox 3.6 - 7.0
                            if (typeof file.getAsBinary == 'function') {
                                // Содержимое файла находится в file.getAsBinary()
                                // -- вызвать парсер
                            }
                            else if (typeof file.getAsDataURL == 'function') {
                                // Содержимое файла находится в file.getAsDataURL()
                                // в виде закодированной base64 строки
                                // -- декодировать и вызвать парсер
                            }
                                // Браузеры с поддержкой HTML5
                            else {
                                if (typeof FileReader != 'undefined') {
                                    var reader = new FileReader();

                                    reader.onloadend = function (evt) {
                                        if (evt.target.readyState == FileReader.DONE) {
                                            // Данные пришли в base64
                                            if (evt.target.result.substr(0, 5) == 'data:') {
                                                // Содержимое файла находится в evt.target.result
                                                // в виде закодированной base64 строки
                                                // -- декодировать и вызвать парсер
                                            }
                                                // Двоичные данные
                                            else {
                                                // Содержимое файла находится в evt.target.result
                                                // -- вызвать парсер
                                            }
                                        }
                                    };

                                    var blob;
                                    if (file.slice) {
                                        blob = file.slice(0, file.size);
                                    }
                                    else if (file.webkitSlice) {
                                        blob = file.webkitSlice(0, file.size);
                                    }
                                    else if (file.mozSlice) {
                                        blob = file.mozSlice(0, file.size);
                                    }

                                    // Если поддерживается бинарное чтение, то использовать его
                                    if (typeof file.getAsBinary == 'function') {
                                        reader.readAsBinaryString(blob);
                                    }
                                        // Использовать чтение в base64
                                    else {
                                        reader.readAsDataURL(blob);
                                    }
                                }
                            }
                        }
                    }
                }
                catch (e) {
                    // Браузер не поддерживает работу с содержимым файлов
                }
            }
        });
    </script>
}